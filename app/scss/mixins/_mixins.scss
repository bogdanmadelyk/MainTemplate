//Clearfix
@mixin clearfix() {
    zoom: 1;
    &:before,
    &:after {
      content: " "; // 1
      display: table; // 2
    }
    &:after {
      clear: both;
    }
}
@mixin lf-child_reset(){
    &:last-child {
        margin-bottom: 0;
    }
    &:first-child {
        margin-top: 0;
    }
}
@mixin bg-grad($colorStart, $colorEnd){
    background: $colorStart;
    background: -moz-linear-gradient(top,  #{$colorStart} 0%, #{$colorEnd} 100%);
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#{$colorStart}), color-stop(100%,#{$colorEnd}));
    background: -webkit-linear-gradient(top,  #{$colorStart} 0%,#{$colorEnd} 100%);
    background: -o-linear-gradient(top,  #{$colorStart} 0%,#{$colorEnd} 100%);
    background: -ms-linear-gradient(top,  #{$colorStart} 0%,#{$colorEnd} 100%);
    background: linear-gradient(to bottom,  #{$colorStart} 0%,#{$colorEnd} 100%);
}
  //Grid
@mixin inline-block(){
    display: inline-block;
    .lt-ie8 & {
        display: inline;
        zoom: 1;
    }
}
@mixin imgresponsive(){
    img{
        display: block;
        max-width: 100%;
        height: auto;
    }
}

@mixin make-grid-columns-px($row,$grid-columns,$grid-gutter-width,$wm) {
    .col {
        float: left;
        position: relative;
        min-height: 1px;
        margin-left:  #{$grid-gutter-width};
        box-sizing: border-box;
        &.first,
        &:first-child {
            clear: left;
            margin-left: 0;
        }
    }
    @for $i from 1 through $grid-columns {
        .col_#{$i}{
            width:(($wm - ($grid-gutter-width * ($grid-columns - 1))) / $grid-columns) * $i + $grid-gutter-width * ($i - 1);
        }
    }
    .col_#{$grid-columns} {
        margin-left: 0;
    }
}
  
@mixin make-grid-ofleft($row,$grid-columns,$grid-gutter-width) {
    @for $i from 1 through $grid-columns - 1 {
        .ofleft-#{$i}{
            margin-left: (($grid-width - ($grid-gutter-width * ($grid-columns - 1))) / $grid-columns) * $i + $grid-gutter-width * ($i - 1) + $grid-gutter-width;
        }

        .ofleft-#{$i}:first-child,
        .first.ofleft-#{$i}{
            margin-left: (($grid-width - ($grid-gutter-width * ($grid-columns - 1))) / $grid-columns) * $i + $grid-gutter-width * ($i - 1);
        }

    }
}

@mixin col-prefix($prefix:'',$count:12) {
    @for $i from 0 through $count{
        $multiplier:$i / $count;

        .col#{$prefix}_#{$i}{
            width:(100% * $multiplier);
        }
        .col-offset#{$prefix}_#{$i}{
            margin-left:(100% * $multiplier);
        }
    }
}

@mixin make-grid-columns-persent($count,$gutter){
    .col {
        width:100%;
        float: left;
        position: relative;
        min-height: 1px;
        box-sizing: border-box;
        padding-left: $gutter/2;
        padding-right: $gutter/2;
        &.first,
        &:first-child {
            clear: left;
        }
    }

    .g-col_a{ width:auto }
    @include col-prefix('');
    .g-col_pl_0{ padding-left:0 }
    .g-col_pr_0{ padding-right:0 }

    .g-col_xs_a{ width:auto }
    @include col-prefix('_xs', 12);
    .g-col_xs_pl_0{ padding-left:0 }
    .g-col_xs_pr_0{ padding-right:0 }

    @media (min-width:$width_xs + 1px) {
        .g-col_md_a{ width:auto }
        @include col-prefix('_md', 12);
        .g-col_md_pl_0{ padding-left:0 }
        .g-col_md_pr_0{ padding-right:0 }
    }
    @media (min-width:$width_md + 1px) {
        .g-col_lg_a{ width:auto }
        @include col-prefix('_lg', 12);
        .g-col_lg_pl_0{ padding-left:0 }
        .g-col_lg_pr_0{ padding-right:0 }
    }

}

@mixin margin-padding($prefix:'',$margin-padding:50,$body-font-size:10) {
    @for $i from 0 through 10{
        $val:$margin-padding  / $body-font-size * $i + px;
        $val-m:-$margin-padding  / $body-font-size * $i + px;
        .g-p_#{$i}#{$prefix}{ padding:$val; }
        .g-ptb_#{$i}#{$prefix}{ padding-top:$val; padding-bottom:$val }
        .g-plr_#{$i}#{$prefix}{ padding-left:$val; padding-right:$val }

        .g-pt_#{$i}#{$prefix}{ padding-top:$val }
        .g-pr_#{$i}#{$prefix}{ padding-right:$val }
        .g-pb_#{$i}#{$prefix}{ padding-bottom:$val }
        .g-pl_#{$i}#{$prefix}{ padding-left:$val }

        .g-mt_#{$i}#{$prefix}{ margin-top:$val }
        .g-mr_#{$i}#{$prefix}{ margin-right:$val }
        .g-mb_#{$i}#{$prefix}{ margin-bottom:$val }
        .g-ml_#{$i}#{$prefix}{ margin-left:$val }
        .g-mtb_#{$i}#{$prefix}{ margin-top:$val; margin-bottom:$val }

        .g-mlr_#{$i}#{$prefix}{ margin-left:$val; margin-right:$val }

        .g-mt_#{$i}_m#{$prefix}{ margin-top:$val-m }
        .g-mr_#{$i}_m#{$prefix}{ margin-right:$val-m }
        .g-mb_#{$i}_m#{$prefix}{ margin-bottom:$val-m }
        .g-ml_#{$i}_m#{$prefix}{ margin-left:$val-m }

        .g-m_#{$i}_m#{$prefix}{ margin:$val-m; }
        .g-mtb_#{$i}_m#{$prefix}{ margin-top:$val-m; margin-bottom:$val-m }
        .g-mlr_#{$i}_m#{$prefix}{ margin-left:$val-m; margin-right:$val-m }

    }
}
@mixin r($width){
	@media only screen and (max-width: $width + "px"){
		@content;
	}
}
@mixin rh($height){
	@media only screen and (max-height: $height + "px"){
		@content;
	}
}

@mixin font-face($font-name,$font-file,$font-style,$font-weight){
    @font-face {
        font-family: '#{$font-name}';
        src: url('../fonts/#{$font-file}.eot'); /* IE9 Compat Modes */
        src: url('../fonts/#{$font-file}.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */
        url('../fonts/#{$font-file}.woff') format('woff'), /* Modern Browsers */
        url('../fonts/#{$font-file}.ttf') format('truetype'), /* Safari, Android, iOS */
        url('../fonts/#{$font-file}.svg##{$font-file}') format('svg'); /* Legacy iOS */
        font-style: #{$font-style};
        font-weight: #{$font-weight};
        text-rendering: optimizeLegibility;
    }
}